-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


ALTER TABLE IF EXISTS public."inventoryCorrection" DROP CONSTRAINT IF EXISTS "inventoryCorrection_itemId_fkey";

ALTER TABLE IF EXISTS public."itemUnits" DROP CONSTRAINT IF EXISTS "itemUnits_itemId_fkey";

ALTER TABLE IF EXISTS public.items DROP CONSTRAINT IF EXISTS "items_categoryId_fkey";

ALTER TABLE IF EXISTS public."purchaseDetails" DROP CONSTRAINT IF EXISTS "purchaseDetails_itemId_fkey";

ALTER TABLE IF EXISTS public."purchaseDetails" DROP CONSTRAINT IF EXISTS "purchaseDetails_purchaseId_fkey";

ALTER TABLE IF EXISTS public.purchases DROP CONSTRAINT IF EXISTS "purchases_vendorId_fkey";

ALTER TABLE IF EXISTS public."saleDetails" DROP CONSTRAINT IF EXISTS "saleDetails_itemId_fkey";

ALTER TABLE IF EXISTS public."saleDetails" DROP CONSTRAINT IF EXISTS "saleDetails_salesId_fkey";



DROP TABLE IF EXISTS public."dailyReport";

CREATE TABLE IF NOT EXISTS public."dailyReport"
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    "prevClosing" double precision DEFAULT '0'::double precision,
    "cashFunding" double precision DEFAULT '0'::double precision,
    "upiFunding" double precision DEFAULT '0'::double precision,
    "totalSales" double precision DEFAULT '0'::double precision,
    "totalExpenses" double precision DEFAULT '0'::double precision,
    "previousDayDue" double precision DEFAULT '0'::double precision,
    "cashHandover" double precision DEFAULT '0'::double precision,
    "cashClosing" double precision DEFAULT '0'::double precision,
    "todayDue" double precision DEFAULT '0'::double precision,
    "reportDate" date NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    created_by uuid DEFAULT auth.uid(),
    CONSTRAINT "dailyReport_pkey" PRIMARY KEY (id),
    CONSTRAINT "dailyReport_reportDate_key" UNIQUE ("reportDate")
);

ALTER TABLE IF EXISTS public."dailyReport"
    ENABLE ROW LEVEL SECURITY;

-- POLICY: policy_dailyReport_all

-- DROP POLICY IF EXISTS "policy_dailyReport_all" ON public."dailyReport";

CREATE POLICY "policy_dailyReport_all"
    ON public."dailyReport"
    AS PERMISSIVE
    FOR ALL
    TO authenticated
    USING (true);

-- Trigger: trg_update_dailyReport

-- DROP TRIGGER IF EXISTS "trg_update_dailyReport" ON public."dailyReport";

CREATE OR REPLACE TRIGGER "trg_update_dailyReport"
    BEFORE UPDATE 
    ON public."dailyReport"
    FOR EACH ROW
    EXECUTE FUNCTION public.update_modified_column();    

DROP TABLE IF EXISTS public."inventoryCorrection";

CREATE TABLE IF NOT EXISTS public."inventoryCorrection"
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    "itemId" bigint NOT NULL,
    "itemName" text COLLATE pg_catalog."default",
    "stockDate" date NOT NULL,
    quantity bigint DEFAULT '0'::bigint,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    created_by uuid DEFAULT auth.uid(),
    "unitName" text COLLATE pg_catalog."default",
    "stockType" text COLLATE pg_catalog."default",
    CONSTRAINT "inventoryCorrection_pkey" PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS public."inventoryCorrection"
    ENABLE ROW LEVEL SECURITY;

COMMENT ON TABLE public."inventoryCorrection"
    IS 'Manual correction for Inventory';

-- POLICY: policy_inventoryCorrection_all

-- DROP POLICY IF EXISTS "policy_inventoryCorrection_all" ON public."inventoryCorrection";

CREATE POLICY "policy_inventoryCorrection_all"
    ON public."inventoryCorrection"
    AS PERMISSIVE
    FOR ALL
    TO authenticated
    USING (true);

-- Trigger: trg_update_inventoryCorrection

-- DROP TRIGGER IF EXISTS "trg_update_inventoryCorrection" ON public."inventoryCorrection";

CREATE OR REPLACE TRIGGER "trg_update_inventoryCorrection"
    BEFORE UPDATE 
    ON public."inventoryCorrection"
    FOR EACH ROW
    EXECUTE FUNCTION public.update_modified_column();        

DROP TABLE IF EXISTS public."itemCategories";

CREATE TABLE IF NOT EXISTS public."itemCategories"
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    "categoryName" text COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    updated_at timestamp with time zone,
    created_by uuid DEFAULT auth.uid(),
    updated_by uuid,
    CONSTRAINT "itemCategories_pkey" PRIMARY KEY (id),
    CONSTRAINT "itemCategories_categoryName_key" UNIQUE ("categoryName")
);

ALTER TABLE IF EXISTS public."itemCategories"
    ENABLE ROW LEVEL SECURITY;

COMMENT ON TABLE public."itemCategories"
    IS 'A master list of categories';

-- POLICY: policy_itemCategories_all

-- DROP POLICY IF EXISTS "policy_itemCategories_all" ON public."itemCategories";

CREATE POLICY "policy_itemCategories_all"
    ON public."itemCategories"
    AS PERMISSIVE
    FOR ALL
    TO authenticated
    USING (true);

-- Trigger: trg_update_itemCategories

-- DROP TRIGGER IF EXISTS "trg_update_itemCategories" ON public."itemCategories";

CREATE OR REPLACE TRIGGER "trg_update_itemCategories"
    BEFORE UPDATE 
    ON public."itemCategories"
    FOR EACH ROW
    EXECUTE FUNCTION public.update_modified_column();

DROP TABLE IF EXISTS public."itemUnits";

CREATE TABLE IF NOT EXISTS public."itemUnits"
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    "itemId" bigint NOT NULL,
    "unitName" text COLLATE pg_catalog."default" DEFAULT 'pcs'::text,
    factor smallint DEFAULT '1'::smallint,
    "costPrice" double precision DEFAULT '0'::double precision,
    "salePrice" double precision DEFAULT '0'::double precision,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    created_by uuid NOT NULL DEFAULT auth.uid(),
    updated_at time with time zone,
    updated_by uuid,
    CONSTRAINT "itemUnits_pkey" PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS public."itemUnits"
    ENABLE ROW LEVEL SECURITY;

COMMENT ON TABLE public."itemUnits"
    IS 'A table for item units and prices';

-- POLICY: policy_itemUnits_all

-- DROP POLICY IF EXISTS "policy_itemUnits_all" ON public."itemUnits";

CREATE POLICY "policy_itemUnits_all"
    ON public."itemUnits"
    AS PERMISSIVE
    FOR ALL
    TO authenticated
    USING (true);

-- Trigger: trg_update_itemUnits

-- DROP TRIGGER IF EXISTS "trg_update_itemUnits" ON public."itemUnits";

CREATE OR REPLACE TRIGGER "trg_update_itemUnits"
    BEFORE UPDATE 
    ON public."itemUnits"
    FOR EACH ROW
    EXECUTE FUNCTION public.update_modified_column();

DROP TABLE IF EXISTS public.items;

CREATE TABLE IF NOT EXISTS public.items
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    "itemName" text COLLATE pg_catalog."default" NOT NULL,
    "forSale" boolean NOT NULL DEFAULT false,
    "forStock" boolean NOT NULL DEFAULT false,
    "categoryId" bigint NOT NULL,
    "brandId" bigint,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    created_by uuid DEFAULT auth.uid(),
    updated_at timestamp with time zone,
    updated_by uuid,
    CONSTRAINT items_pkey PRIMARY KEY (id),
    CONSTRAINT "items_itemName_key" UNIQUE ("itemName")
);

ALTER TABLE IF EXISTS public.items
    ENABLE ROW LEVEL SECURITY;

COMMENT ON TABLE public.items
    IS 'A list of Product Items';

-- POLICY: policy_items_all

-- DROP POLICY IF EXISTS policy_items_all ON public.items;

CREATE POLICY policy_items_all
    ON public.items
    AS PERMISSIVE
    FOR ALL
    TO authenticated
    USING (true);

-- Trigger: trg_update_items

-- DROP TRIGGER IF EXISTS trg_update_items ON public.items;

CREATE OR REPLACE TRIGGER trg_update_items
    BEFORE UPDATE 
    ON public.items
    FOR EACH ROW
    EXECUTE FUNCTION public.update_modified_column();

DROP TABLE IF EXISTS public."purchaseDetails";

CREATE TABLE IF NOT EXISTS public."purchaseDetails"
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    "purchaseId" bigint NOT NULL,
    "itemId" bigint NOT NULL,
    "itemName" text COLLATE pg_catalog."default",
    unit text COLLATE pg_catalog."default",
    price double precision DEFAULT '0'::double precision,
    quantity bigint DEFAULT '0'::bigint,
    amount double precision DEFAULT '0'::double precision,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    created_by uuid DEFAULT auth.uid(),
    updated_at timestamp with time zone,
    updated_by uuid,
    CONSTRAINT "purchaseDetails_pkey" PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS public."purchaseDetails"
    ENABLE ROW LEVEL SECURITY;

-- POLICY: policy_purchaseDetails_all

-- DROP POLICY IF EXISTS "policy_purchaseDetails_all" ON public."purchaseDetails";

CREATE POLICY "policy_purchaseDetails_all"
    ON public."purchaseDetails"
    AS PERMISSIVE
    FOR ALL
    TO authenticated
    USING (true);

-- Trigger: trg_update_purchaseDetails

-- DROP TRIGGER IF EXISTS "trg_update_purchaseDetails" ON public."purchaseDetails";

CREATE OR REPLACE TRIGGER "trg_update_purchaseDetails"
    BEFORE UPDATE 
    ON public."purchaseDetails"
    FOR EACH ROW
    EXECUTE FUNCTION public.update_modified_column();

DROP TABLE IF EXISTS public.purchases;

CREATE TABLE IF NOT EXISTS public.purchases
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    "vendorName" text COLLATE pg_catalog."default" NOT NULL DEFAULT 'RETAIL'::text,
    "vendorAddress" text COLLATE pg_catalog."default",
    "vendorPhone" bigint,
    "billedAmount" double precision DEFAULT '0'::double precision,
    discount double precision DEFAULT '0'::double precision,
    "payableAmount" double precision DEFAULT '0'::double precision,
    "paidUpi" double precision DEFAULT '0'::double precision,
    "paidCash" double precision DEFAULT '0'::double precision,
    "totalPaid" double precision DEFAULT '0'::double precision,
    "invoiceDate" date NOT NULL,
    status text COLLATE pg_catalog."default" NOT NULL DEFAULT 'DRAFT'::text,
    "paymentDate" date,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    created_by uuid DEFAULT auth.uid(),
    updated_at timestamp with time zone,
    updated_by uuid,
    "vendorId" bigint,
    CONSTRAINT purchases_pkey PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS public.purchases
    ENABLE ROW LEVEL SECURITY;

-- POLICY: policy_purchases_all

-- DROP POLICY IF EXISTS policy_purchases_all ON public.purchases;

CREATE POLICY policy_purchases_all
    ON public.purchases
    AS PERMISSIVE
    FOR ALL
    TO authenticated
    USING (true);

-- Trigger: trg_update_purchases

-- DROP TRIGGER IF EXISTS trg_update_purchases ON public.purchases;

CREATE OR REPLACE TRIGGER trg_update_purchases
    BEFORE UPDATE 
    ON public.purchases
    FOR EACH ROW
    EXECUTE FUNCTION public.update_modified_column();

DROP TABLE IF EXISTS public."saleDetails";

CREATE TABLE IF NOT EXISTS public."saleDetails"
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    "salesId" bigint NOT NULL,
    "itemId" bigint NOT NULL,
    "itemName" text COLLATE pg_catalog."default",
    unit text COLLATE pg_catalog."default",
    price double precision DEFAULT '0'::double precision,
    quantity bigint DEFAULT '0'::bigint,
    amount double precision DEFAULT '0'::double precision,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    created_by uuid DEFAULT auth.uid(),
    updated_at timestamp with time zone,
    updated_by uuid,
    CONSTRAINT "saleDetails_pkey" PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS public."saleDetails"
    ENABLE ROW LEVEL SECURITY;

COMMENT ON TABLE public."saleDetails"
    IS 'A table of individual items in an invoice';

-- POLICY: policy_saleDetails_all

-- DROP POLICY IF EXISTS "policy_saleDetails_all" ON public."saleDetails";

CREATE POLICY "policy_saleDetails_all"
    ON public."saleDetails"
    AS PERMISSIVE
    FOR ALL
    TO authenticated
    USING (true);

-- Trigger: trg_update_saleDetails

-- DROP TRIGGER IF EXISTS "trg_update_saleDetails" ON public."saleDetails";

CREATE OR REPLACE TRIGGER "trg_update_saleDetails"
    BEFORE UPDATE 
    ON public."saleDetails"
    FOR EACH ROW
    EXECUTE FUNCTION public.update_modified_column();

DROP TABLE IF EXISTS public.sales;

CREATE TABLE IF NOT EXISTS public.sales
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    customer text COLLATE pg_catalog."default",
    "billedAmount" double precision DEFAULT '0'::double precision,
    discount double precision DEFAULT '0'::double precision,
    "payableAmount" double precision DEFAULT '0'::double precision,
    "paidUpi" double precision DEFAULT '0'::double precision,
    "paidCash" double precision DEFAULT '0'::double precision,
    "totalPaid" double precision DEFAULT '0'::double precision,
    "invoiceDate" date NOT NULL,
    status text COLLATE pg_catalog."default" NOT NULL DEFAULT 'DRAFT'::text,
    "paymentDate" date,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    created_by uuid DEFAULT auth.uid(),
    updated_at timestamp with time zone,
    updated_by uuid,
    CONSTRAINT sales_pkey PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS public.sales
    ENABLE ROW LEVEL SECURITY;

COMMENT ON TABLE public.sales
    IS 'Table of Sales';

-- POLICY: policy_sales_all

-- DROP POLICY IF EXISTS policy_sales_all ON public.sales;

CREATE POLICY policy_sales_all
    ON public.sales
    AS PERMISSIVE
    FOR ALL
    TO authenticated
    USING (true);

-- Trigger: trg_update_sales

-- DROP TRIGGER IF EXISTS trg_update_sales ON public.sales;

CREATE OR REPLACE TRIGGER trg_update_sales
    BEFORE UPDATE 
    ON public.sales
    FOR EACH ROW
    EXECUTE FUNCTION public.update_modified_column();

DROP TABLE IF EXISTS public.vendors;

CREATE TABLE IF NOT EXISTS public.vendors
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    "vendorName" text COLLATE pg_catalog."default" NOT NULL,
    "vendorAddress" text COLLATE pg_catalog."default" DEFAULT 'UNKNOWN'::text,
    "vendorPhone" numeric(10, 0),
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    created_by uuid DEFAULT auth.uid(),
    updated_at timestamp with time zone,
    updated_by uuid,
    CONSTRAINT vendors_pkey PRIMARY KEY (id),
    CONSTRAINT "vendors_vendorName_key" UNIQUE ("vendorName")
);

ALTER TABLE IF EXISTS public.vendors
    ENABLE ROW LEVEL SECURITY;

COMMENT ON TABLE public.vendors
    IS 'table of vendors';

-- POLICY: policy_vendors_all

-- DROP POLICY IF EXISTS policy_vendors_all ON public.vendors;

CREATE POLICY policy_vendors_all
    ON public.vendors
    AS PERMISSIVE
    FOR ALL
    TO authenticated
    USING (true);

-- Trigger: trg_update_vendors

-- DROP TRIGGER IF EXISTS trg_update_vendors ON public.vendors;

CREATE OR REPLACE TRIGGER trg_update_vendors
    BEFORE UPDATE 
    ON public.vendors
    FOR EACH ROW
    EXECUTE FUNCTION public.update_modified_column();

ALTER TABLE IF EXISTS public."inventoryCorrection"
    ADD CONSTRAINT "inventoryCorrection_itemId_fkey" FOREIGN KEY ("itemId")
    REFERENCES public.items (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public."itemUnits"
    ADD CONSTRAINT "itemUnits_itemId_fkey" FOREIGN KEY ("itemId")
    REFERENCES public.items (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.items
    ADD CONSTRAINT "items_categoryId_fkey" FOREIGN KEY ("categoryId")
    REFERENCES public."itemCategories" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public."purchaseDetails"
    ADD CONSTRAINT "purchaseDetails_itemId_fkey" FOREIGN KEY ("itemId")
    REFERENCES public.items (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public."purchaseDetails"
    ADD CONSTRAINT "purchaseDetails_purchaseId_fkey" FOREIGN KEY ("purchaseId")
    REFERENCES public.purchases (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.purchases
    ADD CONSTRAINT "purchases_vendorId_fkey" FOREIGN KEY ("vendorId")
    REFERENCES public.vendors (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public."saleDetails"
    ADD CONSTRAINT "saleDetails_itemId_fkey" FOREIGN KEY ("itemId")
    REFERENCES public.items (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public."saleDetails"
    ADD CONSTRAINT "saleDetails_salesId_fkey" FOREIGN KEY ("salesId")
    REFERENCES public.sales (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

END;